
out/iterstruct.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    rsp,0x8
    1008:	48 8b 05 d9 2f 00 00 	mov    rax,QWORD PTR [rip+0x2fd9]        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   rax,rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   rax
    1016:	48 83 c4 08          	add    rsp,0x8
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 e2 2f 00 00    	push   QWORD PTR [rip+0x2fe2]        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 2f 00 00    	jmp    QWORD PTR [rip+0x2fe4]        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000001030 <free@plt>:
    1030:	ff 25 e2 2f 00 00    	jmp    QWORD PTR [rip+0x2fe2]        # 4018 <free@GLIBC_2.2.5>
    1036:	68 00 00 00 00       	push   0x0
    103b:	e9 e0 ff ff ff       	jmp    1020 <.plt>

0000000000001040 <puts@plt>:
    1040:	ff 25 da 2f 00 00    	jmp    QWORD PTR [rip+0x2fda]        # 4020 <puts@GLIBC_2.2.5>
    1046:	68 01 00 00 00       	push   0x1
    104b:	e9 d0 ff ff ff       	jmp    1020 <.plt>

0000000000001050 <__stack_chk_fail@plt>:
    1050:	ff 25 d2 2f 00 00    	jmp    QWORD PTR [rip+0x2fd2]        # 4028 <__stack_chk_fail@GLIBC_2.4>
    1056:	68 02 00 00 00       	push   0x2
    105b:	e9 c0 ff ff ff       	jmp    1020 <.plt>

0000000000001060 <printf@plt>:
    1060:	ff 25 ca 2f 00 00    	jmp    QWORD PTR [rip+0x2fca]        # 4030 <printf@GLIBC_2.2.5>
    1066:	68 03 00 00 00       	push   0x3
    106b:	e9 b0 ff ff ff       	jmp    1020 <.plt>

0000000000001070 <gettimeofday@plt>:
    1070:	ff 25 c2 2f 00 00    	jmp    QWORD PTR [rip+0x2fc2]        # 4038 <gettimeofday@GLIBC_2.2.5>
    1076:	68 04 00 00 00       	push   0x4
    107b:	e9 a0 ff ff ff       	jmp    1020 <.plt>

0000000000001080 <strtol@plt>:
    1080:	ff 25 ba 2f 00 00    	jmp    QWORD PTR [rip+0x2fba]        # 4040 <strtol@GLIBC_2.2.5>
    1086:	68 05 00 00 00       	push   0x5
    108b:	e9 90 ff ff ff       	jmp    1020 <.plt>

0000000000001090 <malloc@plt>:
    1090:	ff 25 b2 2f 00 00    	jmp    QWORD PTR [rip+0x2fb2]        # 4048 <malloc@GLIBC_2.2.5>
    1096:	68 06 00 00 00       	push   0x6
    109b:	e9 80 ff ff ff       	jmp    1020 <.plt>

Disassembly of section .text:

00000000000010a0 <main>:
#include<stdio.h>
#include<stdlib.h>

double dwalltime();

int main(int argc, char* argv[]){
    10a0:	41 57                	push   r15

#ifdef __USE_EXTERN_INLINES
__extern_inline int

__NTH (atoi (const char *__nptr))
{
  return (int) strtol (__nptr, (char **) NULL, 10);
    10a2:	ba 0a 00 00 00       	mov    edx,0xa
    10a7:	41 56                	push   r14
    10a9:	41 55                	push   r13
    10ab:	41 54                	push   r12
    10ad:	55                   	push   rbp
    10ae:	53                   	push   rbx
    10af:	48 83 ec 68          	sub    rsp,0x68
    10b3:	48 8b 7e 08          	mov    rdi,QWORD PTR [rsi+0x8]
    10b7:	31 f6                	xor    esi,esi
    10b9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    10c2:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    10c7:	31 c0                	xor    eax,eax
    10c9:	e8 b2 ff ff ff       	call   1080 <strtol@plt>
int i=0,j=0,k=0;
double *A,*B,*C;
double timetick;

 N=atoi(argv[1]); 
 A=(double*)malloc(sizeof(double)*N*N); 
    10ce:	4c 63 f8             	movsxd r15,eax
    10d1:	48 89 c3             	mov    rbx,rax
    10d4:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
    10d9:	4d 89 fd             	mov    r13,r15
    10dc:	89 44 24 0c          	mov    DWORD PTR [rsp+0xc],eax
    10e0:	4d 0f af ef          	imul   r13,r15
    10e4:	4c 89 7c 24 30       	mov    QWORD PTR [rsp+0x30],r15
    10e9:	49 c1 e5 03          	shl    r13,0x3
    10ed:	4c 89 ef             	mov    rdi,r13
    10f0:	e8 9b ff ff ff       	call   1090 <malloc@plt>
 B=(double*)malloc(sizeof(double)*N*N); 
    10f5:	4c 89 ef             	mov    rdi,r13
 A=(double*)malloc(sizeof(double)*N*N); 
    10f8:	49 89 c4             	mov    r12,rax
 B=(double*)malloc(sizeof(double)*N*N); 
    10fb:	e8 90 ff ff ff       	call   1090 <malloc@plt>
 C=(double*)malloc(sizeof(double)*N*N); 
    1100:	4c 89 ef             	mov    rdi,r13
 B=(double*)malloc(sizeof(double)*N*N); 
    1103:	48 89 c5             	mov    rbp,rax
 C=(double*)malloc(sizeof(double)*N*N); 
    1106:	e8 85 ff ff ff       	call   1090 <malloc@plt>

 printf("Incializando matrices...\n");
    110b:	48 8d 3d f2 0e 00 00 	lea    rdi,[rip+0xef2]        # 2004 <_IO_stdin_used+0x4>
 C=(double*)malloc(sizeof(double)*N*N); 
    1112:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
 printf("Incializando matrices...\n");
    1117:	e8 24 ff ff ff       	call   1040 <puts@plt>
 for(i=0;i<N;i++){
    111c:	85 db                	test   ebx,ebx
    111e:	0f 8e da 03 00 00    	jle    14fe <main+0x45e>
    1124:	48 89 d8             	mov    rax,rbx
    1127:	41 89 d8             	mov    r8d,ebx
    112a:	41 89 dd             	mov    r13d,ebx
    112d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [rsp+0xc]
    1131:	d1 eb                	shr    ebx,1
    1133:	41 89 c6             	mov    r14d,eax
    1136:	66 0f 28 0d 52 0f 00 00 	movapd xmm1,XMMWORD PTR [rip+0xf52]        # 2090 <_IO_stdin_used+0x90>
    113e:	31 ff                	xor    edi,edi
    1140:	49 c1 e7 03          	shl    r15,0x3
    1144:	48 c1 e3 04          	shl    rbx,0x4
    1148:	41 83 e6 fe          	and    r14d,0xfffffffe
    114c:	31 d2                	xor    edx,edx
 	for(j=0;j<N;j++){
		A[i*N+j]=1;
    114e:	f2 0f 10 05 2a 0f 00 00 	movsd  xmm0,QWORD PTR [rip+0xf2a]        # 2080 <_IO_stdin_used+0x80>
 for(i=0;i<N;i++){
    1156:	45 31 c9             	xor    r9d,r9d
    1159:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
 	for(j=0;j<N;j++){
    1160:	41 83 fd 01          	cmp    r13d,0x1
    1164:	0f 84 8d 03 00 00    	je     14f7 <main+0x457>
    116a:	4d 8d 14 3c          	lea    r10,[r12+rdi*1]
    116e:	48 8d 74 3d 00       	lea    rsi,[rbp+rdi*1+0x0]
		A[i*N+j]=1;
    1173:	31 c0                	xor    eax,eax
    1175:	0f 1f 00             	nop    DWORD PTR [rax]
    1178:	41 0f 11 0c 02       	movups XMMWORD PTR [r10+rax*1],xmm1
		B[i*N+j]=1;
    117d:	0f 11 0c 06          	movups XMMWORD PTR [rsi+rax*1],xmm1
 	for(j=0;j<N;j++){
    1181:	48 83 c0 10          	add    rax,0x10
    1185:	48 39 d8             	cmp    rax,rbx
    1188:	75 ee                	jne    1178 <main+0xd8>
    118a:	44 89 f0             	mov    eax,r14d
    118d:	45 39 f5             	cmp    r13d,r14d
    1190:	74 10                	je     11a2 <main+0x102>
		A[i*N+j]=1;
    1192:	01 d0                	add    eax,edx
    1194:	48 98                	cdqe   
    1196:	f2 41 0f 11 04 c4    	movsd  QWORD PTR [r12+rax*8],xmm0
		B[i*N+j]=1;
    119c:	f2 0f 11 44 c5 00    	movsd  QWORD PTR [rbp+rax*8+0x0],xmm0
 for(i=0;i<N;i++){
    11a2:	41 83 c1 01          	add    r9d,0x1
    11a6:	44 01 c2             	add    edx,r8d
    11a9:	4c 01 ff             	add    rdi,r15
    11ac:	41 39 c9             	cmp    r9d,ecx
    11af:	75 af                	jne    1160 <main+0xc0>
	}
  }   
  
  printf("Calculando While...\n");
    11b1:	48 8d 3d b3 0e 00 00 	lea    rdi,[rip+0xeb3]        # 206b <_IO_stdin_used+0x6b>
    11b8:	44 89 44 24 38       	mov    DWORD PTR [rsp+0x38],r8d
    11bd:	e8 7e fe ff ff       	call   1040 <puts@plt>
double dwalltime()
{
	double sec;
	struct timeval tv;

	gettimeofday(&tv,NULL);
    11c2:	48 8d 7c 24 40       	lea    rdi,[rsp+0x40]
    11c7:	31 f6                	xor    esi,esi
    11c9:	48 89 7c 24 20       	mov    QWORD PTR [rsp+0x20],rdi
    11ce:	e8 9d fe ff ff       	call   1070 <gettimeofday@plt>
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    11d3:	66 0f ef e4          	pxor   xmm4,xmm4
    11d7:	66 0f ef c0          	pxor   xmm0,xmm0
    11db:	4d 89 e1             	mov    r9,r12
    11de:	f2 48 0f 2a 64 24 48 	cvtsi2sd xmm4,QWORD PTR [rsp+0x48]
    11e5:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
    11ea:	f2 0f 10 1d 96 0e 00 00 	movsd  xmm3,QWORD PTR [rip+0xe96]        # 2088 <_IO_stdin_used+0x88>
    11f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [rsp],0x0
    11f9:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
    11fe:	f2 48 0f 2a 44 24 40 	cvtsi2sd xmm0,QWORD PTR [rsp+0x40]
    1205:	44 8b 44 24 38       	mov    r8d,DWORD PTR [rsp+0x38]
    120a:	83 e8 01             	sub    eax,0x1
    120d:	4c 8d 5c c7 08       	lea    r11,[rdi+rax*8+0x8]
    1212:	48 f7 d0             	not    rax
    1215:	31 ff                	xor    edi,edi
    1217:	f2 0f 5e e3          	divsd  xmm4,xmm3
    121b:	48 c1 e0 03          	shl    rax,0x3
    121f:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    1224:	f2 0f 58 e0          	addsd  xmm4,xmm0
		while(i<N){
    1228:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
			while(j<N){
    1230:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    1235:	48 89 ee             	mov    rsi,rbp
					C[i*N+j] += A[i*N+k]*B[k+j*N];
    1238:	31 c9                	xor    ecx,ecx
    123a:	4e 8d 14 18          	lea    r10,[rax+r11*1]
    123e:	66 90                	xchg   ax,ax
				while(k<N){
    1240:	f2 41 0f 10 02       	movsd  xmm0,QWORD PTR [r10]
    1245:	41 83 fd 01          	cmp    r13d,0x1
    1249:	0f 84 a1 02 00 00    	je     14f0 <main+0x450>
					C[i*N+j] += A[i*N+k]*B[k+j*N];
    124f:	31 c0                	xor    eax,eax
    1251:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    1258:	66 0f 10 14 06       	movupd xmm2,XMMWORD PTR [rsi+rax*1]
    125d:	66 41 0f 10 2c 01    	movupd xmm5,XMMWORD PTR [r9+rax*1]
    1263:	48 83 c0 10          	add    rax,0x10
    1267:	66 0f 59 d5          	mulpd  xmm2,xmm5
    126b:	f2 0f 58 c2          	addsd  xmm0,xmm2
    126f:	66 0f 15 d2          	unpckhpd xmm2,xmm2
    1273:	f2 0f 58 c2          	addsd  xmm0,xmm2
				while(k<N){
    1277:	48 39 d8             	cmp    rax,rbx
    127a:	75 dc                	jne    1258 <main+0x1b8>
				k=0;
    127c:	44 89 f0             	mov    eax,r14d
    127f:	45 39 f5             	cmp    r13d,r14d
    1282:	74 1a                	je     129e <main+0x1fe>
					C[i*N+j] += A[i*N+k]*B[k+j*N];
    1284:	8d 14 01             	lea    edx,[rcx+rax*1]
    1287:	01 f8                	add    eax,edi
    1289:	48 63 d2             	movsxd rdx,edx
    128c:	48 98                	cdqe   
    128e:	f2 0f 10 4c d5 00    	movsd  xmm1,QWORD PTR [rbp+rdx*8+0x0]
    1294:	f2 41 0f 59 0c c4    	mulsd  xmm1,QWORD PTR [r12+rax*8]
    129a:	f2 0f 58 c1          	addsd  xmm0,xmm1
				while(k<N){
    129e:	f2 41 0f 11 02       	movsd  QWORD PTR [r10],xmm0
			while(j<N){
    12a3:	49 83 c2 08          	add    r10,0x8
    12a7:	44 01 c1             	add    ecx,r8d
    12aa:	4c 01 fe             	add    rsi,r15
    12ad:	4d 39 da             	cmp    r10,r11
    12b0:	75 8e                	jne    1240 <main+0x1a0>
			i++;
    12b2:	83 04 24 01          	add    DWORD PTR [rsp],0x1
    12b6:	4d 01 fb             	add    r11,r15
    12b9:	8b 04 24             	mov    eax,DWORD PTR [rsp]
		while(i<N){
    12bc:	44 01 c7             	add    edi,r8d
    12bf:	4d 01 f9             	add    r9,r15
    12c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [rsp+0xc]
    12c6:	0f 85 64 ff ff ff    	jne    1230 <main+0x190>
	gettimeofday(&tv,NULL);
    12cc:	48 8b 5c 24 20       	mov    rbx,QWORD PTR [rsp+0x20]
    12d1:	31 f6                	xor    esi,esi
    12d3:	f2 0f 11 1c 24       	movsd  QWORD PTR [rsp],xmm3
    12d8:	f2 0f 11 64 24 10    	movsd  QWORD PTR [rsp+0x10],xmm4
    12de:	48 89 df             	mov    rdi,rbx
    12e1:	e8 8a fd ff ff       	call   1070 <gettimeofday@plt>
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    12e6:	66 0f ef c0          	pxor   xmm0,xmm0
    12ea:	f2 0f 10 1c 24       	movsd  xmm3,QWORD PTR [rsp]
    12ef:	66 0f ef c9          	pxor   xmm1,xmm1
    12f3:	f2 48 0f 2a 44 24 48 	cvtsi2sd xmm0,QWORD PTR [rsp+0x48]
  printf("Tiempo While en segundos %f \n", dwalltime() - timetick);
    12fa:	f2 0f 10 64 24 10    	movsd  xmm4,QWORD PTR [rsp+0x10]
    1300:	48 8d 3d 16 0d 00 00 	lea    rdi,[rip+0xd16]        # 201d <_IO_stdin_used+0x1d>
    1307:	b8 01 00 00 00       	mov    eax,0x1
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    130c:	f2 48 0f 2a 4c 24 40 	cvtsi2sd xmm1,QWORD PTR [rsp+0x40]
    1313:	f2 0f 5e c3          	divsd  xmm0,xmm3
    1317:	f2 0f 58 c1          	addsd  xmm0,xmm1
  printf("Tiempo While en segundos %f \n", dwalltime() - timetick);
    131b:	f2 0f 5c c4          	subsd  xmm0,xmm4
    131f:	e8 3c fd ff ff       	call   1060 <printf@plt>
  printf("Calculando For...\n ");
    1324:	48 8d 3d 10 0d 00 00 	lea    rdi,[rip+0xd10]        # 203b <_IO_stdin_used+0x3b>
    132b:	31 c0                	xor    eax,eax
    132d:	e8 2e fd ff ff       	call   1060 <printf@plt>
	gettimeofday(&tv,NULL);
    1332:	48 89 df             	mov    rdi,rbx
    1335:	31 f6                	xor    esi,esi
    1337:	e8 34 fd ff ff       	call   1070 <gettimeofday@plt>
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    133c:	66 0f ef c0          	pxor   xmm0,xmm0
    1340:	f2 0f 10 1c 24       	movsd  xmm3,QWORD PTR [rsp]
    1345:	66 0f ef c9          	pxor   xmm1,xmm1
    1349:	f2 48 0f 2a 44 24 48 	cvtsi2sd xmm0,QWORD PTR [rsp+0x48]
		for(i=0;i<N;i++){
    1350:	48 8b 5c 24 28       	mov    rbx,QWORD PTR [rsp+0x28]
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    1355:	f2 48 0f 2a 4c 24 40 	cvtsi2sd xmm1,QWORD PTR [rsp+0x40]
    135c:	f2 0f 5e c3          	divsd  xmm0,xmm3
    1360:	f2 0f 58 c1          	addsd  xmm0,xmm1
    1364:	f2 0f 11 44 24 38    	movsd  QWORD PTR [rsp+0x38],xmm0
		for(i=0;i<N;i++){
    136a:	85 db                	test   ebx,ebx
    136c:	0f 8e e9 00 00 00    	jle    145b <main+0x3bb>
    1372:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
    1377:	8d 43 ff             	lea    eax,[rbx-0x1]
    137a:	41 89 d9             	mov    r9d,ebx
    137d:	4c 8b 74 24 30       	mov    r14,QWORD PTR [rsp+0x30]
    1382:	c7 04 24 00 00 00 00 	mov    DWORD PTR [rsp],0x0
    1389:	41 d1 e9             	shr    r9d,1
    138c:	41 89 db             	mov    r11d,ebx
    138f:	41 89 df             	mov    r15d,ebx
    1392:	4c 8d 6c c7 08       	lea    r13,[rdi+rax*8+0x8]
    1397:	48 f7 d0             	not    rax
    139a:	49 c1 e6 03          	shl    r14,0x3
    139e:	4d 89 e0             	mov    r8,r12
    13a1:	48 c1 e0 03          	shl    rax,0x3
    13a5:	49 c1 e1 04          	shl    r9,0x4
    13a9:	83 e3 fe             	and    ebx,0xfffffffe
    13ac:	31 ff                	xor    edi,edi
    13ae:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    13b3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
			for(j=0;j<N;j++){
    13b8:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    13bd:	48 89 ee             	mov    rsi,rbp
					C[i*N+j] += A[i*N+k]*B[k+j*N];
    13c0:	31 c9                	xor    ecx,ecx
    13c2:	4e 8d 14 28          	lea    r10,[rax+r13*1]
    13c6:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
				for(k=0;k<N;k++){
    13d0:	f2 41 0f 10 02       	movsd  xmm0,QWORD PTR [r10]
    13d5:	41 83 fb 01          	cmp    r11d,0x1
    13d9:	0f 84 09 01 00 00    	je     14e8 <main+0x448>
					C[i*N+j] += A[i*N+k]*B[k+j*N];
    13df:	31 c0                	xor    eax,eax
    13e1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    13e8:	66 0f 10 14 06       	movupd xmm2,XMMWORD PTR [rsi+rax*1]
    13ed:	66 41 0f 10 34 00    	movupd xmm6,XMMWORD PTR [r8+rax*1]
    13f3:	48 83 c0 10          	add    rax,0x10
    13f7:	66 0f 59 d6          	mulpd  xmm2,xmm6
    13fb:	f2 0f 58 c2          	addsd  xmm0,xmm2
    13ff:	66 0f 15 d2          	unpckhpd xmm2,xmm2
    1403:	f2 0f 58 c2          	addsd  xmm0,xmm2
				for(k=0;k<N;k++){
    1407:	49 39 c1             	cmp    r9,rax
    140a:	75 dc                	jne    13e8 <main+0x348>
    140c:	89 d8                	mov    eax,ebx
    140e:	41 39 db             	cmp    r11d,ebx
    1411:	74 1a                	je     142d <main+0x38d>
					C[i*N+j] += A[i*N+k]*B[k+j*N];
    1413:	8d 14 01             	lea    edx,[rcx+rax*1]
    1416:	01 f8                	add    eax,edi
    1418:	48 63 d2             	movsxd rdx,edx
    141b:	48 98                	cdqe   
    141d:	f2 0f 10 4c d5 00    	movsd  xmm1,QWORD PTR [rbp+rdx*8+0x0]
    1423:	f2 41 0f 59 0c c4    	mulsd  xmm1,QWORD PTR [r12+rax*8]
    1429:	f2 0f 58 c1          	addsd  xmm0,xmm1
				for(k=0;k<N;k++){
    142d:	f2 41 0f 11 02       	movsd  QWORD PTR [r10],xmm0
			for(j=0;j<N;j++){
    1432:	49 83 c2 08          	add    r10,0x8
    1436:	44 01 f9             	add    ecx,r15d
    1439:	4c 01 f6             	add    rsi,r14
    143c:	4d 39 d5             	cmp    r13,r10
    143f:	75 8f                	jne    13d0 <main+0x330>
		for(i=0;i<N;i++){
    1441:	83 04 24 01          	add    DWORD PTR [rsp],0x1
    1445:	4d 01 f5             	add    r13,r14
    1448:	8b 04 24             	mov    eax,DWORD PTR [rsp]
    144b:	44 01 ff             	add    edi,r15d
    144e:	4d 01 f0             	add    r8,r14
    1451:	3b 44 24 0c          	cmp    eax,DWORD PTR [rsp+0xc]
    1455:	0f 85 5d ff ff ff    	jne    13b8 <main+0x318>
	gettimeofday(&tv,NULL);
    145b:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    1460:	31 f6                	xor    esi,esi
    1462:	f2 0f 11 1c 24       	movsd  QWORD PTR [rsp],xmm3
    1467:	e8 04 fc ff ff       	call   1070 <gettimeofday@plt>
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    146c:	66 0f ef c0          	pxor   xmm0,xmm0
    1470:	66 0f ef c9          	pxor   xmm1,xmm1
    1474:	f2 0f 10 1c 24       	movsd  xmm3,QWORD PTR [rsp]
    1479:	f2 48 0f 2a 44 24 48 	cvtsi2sd xmm0,QWORD PTR [rsp+0x48]
  printf("Tiempo For en segundos %f \n", dwalltime() - timetick);
    1480:	48 8d 3d c8 0b 00 00 	lea    rdi,[rip+0xbc8]        # 204f <_IO_stdin_used+0x4f>
    1487:	b8 01 00 00 00       	mov    eax,0x1
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    148c:	f2 48 0f 2a 4c 24 40 	cvtsi2sd xmm1,QWORD PTR [rsp+0x40]
    1493:	f2 0f 5e c3          	divsd  xmm0,xmm3
    1497:	f2 0f 58 c1          	addsd  xmm0,xmm1
  printf("Tiempo For en segundos %f \n", dwalltime() - timetick);
    149b:	f2 0f 5c 44 24 38    	subsd  xmm0,QWORD PTR [rsp+0x38]
    14a1:	e8 ba fb ff ff       	call   1060 <printf@plt>
  free(A);
    14a6:	4c 89 e7             	mov    rdi,r12
    14a9:	e8 82 fb ff ff       	call   1030 <free@plt>
  free(B);
    14ae:	48 89 ef             	mov    rdi,rbp
    14b1:	e8 7a fb ff ff       	call   1030 <free@plt>
  free(C);
    14b6:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
    14bb:	e8 70 fb ff ff       	call   1030 <free@plt>
}
    14c0:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    14c5:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
    14ce:	75 76                	jne    1546 <main+0x4a6>
    14d0:	48 83 c4 68          	add    rsp,0x68
    14d4:	31 c0                	xor    eax,eax
    14d6:	5b                   	pop    rbx
    14d7:	5d                   	pop    rbp
    14d8:	41 5c                	pop    r12
    14da:	41 5d                	pop    r13
    14dc:	41 5e                	pop    r14
    14de:	41 5f                	pop    r15
    14e0:	c3                   	ret    
    14e1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
				for(k=0;k<N;k++){
    14e8:	31 c0                	xor    eax,eax
    14ea:	e9 24 ff ff ff       	jmp    1413 <main+0x373>
    14ef:	90                   	nop
				k=0;
    14f0:	31 c0                	xor    eax,eax
    14f2:	e9 8d fd ff ff       	jmp    1284 <main+0x1e4>
 	for(j=0;j<N;j++){
    14f7:	31 c0                	xor    eax,eax
    14f9:	e9 94 fc ff ff       	jmp    1192 <main+0xf2>
  printf("Calculando While...\n");
    14fe:	48 8d 3d 66 0b 00 00 	lea    rdi,[rip+0xb66]        # 206b <_IO_stdin_used+0x6b>
    1505:	e8 36 fb ff ff       	call   1040 <puts@plt>
	gettimeofday(&tv,NULL);
    150a:	48 8d 7c 24 40       	lea    rdi,[rsp+0x40]
    150f:	31 f6                	xor    esi,esi
    1511:	48 89 7c 24 20       	mov    QWORD PTR [rsp+0x20],rdi
    1516:	e8 55 fb ff ff       	call   1070 <gettimeofday@plt>
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    151b:	66 0f ef e4          	pxor   xmm4,xmm4
    151f:	66 0f ef c0          	pxor   xmm0,xmm0
    1523:	f2 0f 10 1d 5d 0b 00 00 	movsd  xmm3,QWORD PTR [rip+0xb5d]        # 2088 <_IO_stdin_used+0x88>
    152b:	f2 48 0f 2a 64 24 48 	cvtsi2sd xmm4,QWORD PTR [rsp+0x48]
    1532:	f2 48 0f 2a 44 24 40 	cvtsi2sd xmm0,QWORD PTR [rsp+0x40]
    1539:	f2 0f 5e e3          	divsd  xmm4,xmm3
    153d:	f2 0f 58 e0          	addsd  xmm4,xmm0
		while(i<N){
    1541:	e9 86 fd ff ff       	jmp    12cc <main+0x22c>
}
    1546:	e8 05 fb ff ff       	call   1050 <__stack_chk_fail@plt>
    154b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001550 <_start>:
    1550:	f3 0f 1e fa          	endbr64 
    1554:	31 ed                	xor    ebp,ebp
    1556:	49 89 d1             	mov    r9,rdx
    1559:	5e                   	pop    rsi
    155a:	48 89 e2             	mov    rdx,rsp
    155d:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    1561:	50                   	push   rax
    1562:	54                   	push   rsp
    1563:	4c 8d 05 b6 01 00 00 	lea    r8,[rip+0x1b6]        # 1720 <__libc_csu_fini>
    156a:	48 8d 0d 3f 01 00 00 	lea    rcx,[rip+0x13f]        # 16b0 <__libc_csu_init>
    1571:	48 8d 3d 28 fb ff ff 	lea    rdi,[rip+0xfffffffffffffb28]        # 10a0 <main>
    1578:	ff 15 62 2a 00 00    	call   QWORD PTR [rip+0x2a62]        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    157e:	f4                   	hlt    
    157f:	90                   	nop

0000000000001580 <deregister_tm_clones>:
    1580:	48 8d 3d d9 2a 00 00 	lea    rdi,[rip+0x2ad9]        # 4060 <__TMC_END__>
    1587:	48 8d 05 d2 2a 00 00 	lea    rax,[rip+0x2ad2]        # 4060 <__TMC_END__>
    158e:	48 39 f8             	cmp    rax,rdi
    1591:	74 15                	je     15a8 <deregister_tm_clones+0x28>
    1593:	48 8b 05 3e 2a 00 00 	mov    rax,QWORD PTR [rip+0x2a3e]        # 3fd8 <_ITM_deregisterTMCloneTable>
    159a:	48 85 c0             	test   rax,rax
    159d:	74 09                	je     15a8 <deregister_tm_clones+0x28>
    159f:	ff e0                	jmp    rax
    15a1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    15a8:	c3                   	ret    
    15a9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000015b0 <register_tm_clones>:
    15b0:	48 8d 3d a9 2a 00 00 	lea    rdi,[rip+0x2aa9]        # 4060 <__TMC_END__>
    15b7:	48 8d 35 a2 2a 00 00 	lea    rsi,[rip+0x2aa2]        # 4060 <__TMC_END__>
    15be:	48 29 fe             	sub    rsi,rdi
    15c1:	48 89 f0             	mov    rax,rsi
    15c4:	48 c1 ee 3f          	shr    rsi,0x3f
    15c8:	48 c1 f8 03          	sar    rax,0x3
    15cc:	48 01 c6             	add    rsi,rax
    15cf:	48 d1 fe             	sar    rsi,1
    15d2:	74 14                	je     15e8 <register_tm_clones+0x38>
    15d4:	48 8b 05 15 2a 00 00 	mov    rax,QWORD PTR [rip+0x2a15]        # 3ff0 <_ITM_registerTMCloneTable>
    15db:	48 85 c0             	test   rax,rax
    15de:	74 08                	je     15e8 <register_tm_clones+0x38>
    15e0:	ff e0                	jmp    rax
    15e2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    15e8:	c3                   	ret    
    15e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000015f0 <__do_global_dtors_aux>:
    15f0:	f3 0f 1e fa          	endbr64 
    15f4:	80 3d 65 2a 00 00 00 	cmp    BYTE PTR [rip+0x2a65],0x0        # 4060 <__TMC_END__>
    15fb:	75 33                	jne    1630 <__do_global_dtors_aux+0x40>
    15fd:	55                   	push   rbp
    15fe:	48 83 3d f2 29 00 00 00 	cmp    QWORD PTR [rip+0x29f2],0x0        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1606:	48 89 e5             	mov    rbp,rsp
    1609:	74 0d                	je     1618 <__do_global_dtors_aux+0x28>
    160b:	48 8b 3d 46 2a 00 00 	mov    rdi,QWORD PTR [rip+0x2a46]        # 4058 <__dso_handle>
    1612:	ff 15 e0 29 00 00    	call   QWORD PTR [rip+0x29e0]        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1618:	e8 63 ff ff ff       	call   1580 <deregister_tm_clones>
    161d:	c6 05 3c 2a 00 00 01 	mov    BYTE PTR [rip+0x2a3c],0x1        # 4060 <__TMC_END__>
    1624:	5d                   	pop    rbp
    1625:	c3                   	ret    
    1626:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    1630:	c3                   	ret    
    1631:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    163c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000001640 <frame_dummy>:
    1640:	f3 0f 1e fa          	endbr64 
    1644:	e9 67 ff ff ff       	jmp    15b0 <register_tm_clones>
    1649:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000001650 <dwalltime>:
{
    1650:	48 83 ec 28          	sub    rsp,0x28
	gettimeofday(&tv,NULL);
    1654:	31 f6                	xor    esi,esi
{
    1656:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    165f:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
    1664:	31 c0                	xor    eax,eax
	gettimeofday(&tv,NULL);
    1666:	48 89 e7             	mov    rdi,rsp
    1669:	e8 02 fa ff ff       	call   1070 <gettimeofday@plt>
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    166e:	66 0f ef c9          	pxor   xmm1,xmm1
    1672:	66 0f ef c0          	pxor   xmm0,xmm0
	return sec;
}
    1676:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    167b:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
	sec = tv.tv_sec + tv.tv_usec/1000000.0;
    1684:	f2 48 0f 2a 0c 24    	cvtsi2sd xmm1,QWORD PTR [rsp]
    168a:	f2 48 0f 2a 44 24 08 	cvtsi2sd xmm0,QWORD PTR [rsp+0x8]
    1691:	f2 0f 5e 05 ef 09 00 00 	divsd  xmm0,QWORD PTR [rip+0x9ef]        # 2088 <_IO_stdin_used+0x88>
    1699:	f2 0f 58 c1          	addsd  xmm0,xmm1
}
    169d:	75 05                	jne    16a4 <dwalltime+0x54>
    169f:	48 83 c4 28          	add    rsp,0x28
    16a3:	c3                   	ret    
    16a4:	e8 a7 f9 ff ff       	call   1050 <__stack_chk_fail@plt>
    16a9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000016b0 <__libc_csu_init>:
    16b0:	f3 0f 1e fa          	endbr64 
    16b4:	41 57                	push   r15
    16b6:	4c 8d 3d 2b 27 00 00 	lea    r15,[rip+0x272b]        # 3de8 <__frame_dummy_init_array_entry>
    16bd:	41 56                	push   r14
    16bf:	49 89 d6             	mov    r14,rdx
    16c2:	41 55                	push   r13
    16c4:	49 89 f5             	mov    r13,rsi
    16c7:	41 54                	push   r12
    16c9:	41 89 fc             	mov    r12d,edi
    16cc:	55                   	push   rbp
    16cd:	48 8d 2d 1c 27 00 00 	lea    rbp,[rip+0x271c]        # 3df0 <__do_global_dtors_aux_fini_array_entry>
    16d4:	53                   	push   rbx
    16d5:	4c 29 fd             	sub    rbp,r15
    16d8:	48 83 ec 08          	sub    rsp,0x8
    16dc:	e8 1f f9 ff ff       	call   1000 <_init>
    16e1:	48 c1 fd 03          	sar    rbp,0x3
    16e5:	74 1f                	je     1706 <__libc_csu_init+0x56>
    16e7:	31 db                	xor    ebx,ebx
    16e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    16f0:	4c 89 f2             	mov    rdx,r14
    16f3:	4c 89 ee             	mov    rsi,r13
    16f6:	44 89 e7             	mov    edi,r12d
    16f9:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]
    16fd:	48 83 c3 01          	add    rbx,0x1
    1701:	48 39 dd             	cmp    rbp,rbx
    1704:	75 ea                	jne    16f0 <__libc_csu_init+0x40>
    1706:	48 83 c4 08          	add    rsp,0x8
    170a:	5b                   	pop    rbx
    170b:	5d                   	pop    rbp
    170c:	41 5c                	pop    r12
    170e:	41 5d                	pop    r13
    1710:	41 5e                	pop    r14
    1712:	41 5f                	pop    r15
    1714:	c3                   	ret    
    1715:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000001720 <__libc_csu_fini>:
    1720:	f3 0f 1e fa          	endbr64 
    1724:	c3                   	ret    

Disassembly of section .fini:

0000000000001728 <_fini>:
    1728:	f3 0f 1e fa          	endbr64 
    172c:	48 83 ec 08          	sub    rsp,0x8
    1730:	48 83 c4 08          	add    rsp,0x8
    1734:	c3                   	ret    
